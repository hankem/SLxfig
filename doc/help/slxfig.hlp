<xfig_object>.justify

 SYNOPSIS
  Justify an object at a specified position

 USAGE
  <xfig_object>.justify (Vector_Type X [, Vector_Type dX]);
  % or
  <xfig_object>.justify (XFig_Object o [, Vector_Type dX]);

 SEE ALSO
  xfig_justify_object

--------------------------------------------------------------

<xfig_object>.render

 SYNOPSIS
  Render an xfig object to a file.

 USAGE
  <xfig_object>.render(String_Type filename);
  % or
  <xfig_object>.render(Struct_Type dev);

 DESCRIPTION
  If the argument is a `filename' string,
  the file is created through `xfig_create_file',
  and the `<xfig_object>' is rendered.
  `xfig_close_file' finally closes the file
  and runs Xfig's `fig2dev' program on it.

 QUALIFIERS
  ; depth=intarray: if specified, only objects of these depths are rendered
  ; verbose=intval: if >=0, the fig2dev command is displayed
  ; fig=0|1: if 0 (default), the .fig file will be removed, otherwise kept

 SEE ALSO
  xfig_set_verbose

--------------------------------------------------------------

<xfig_object>.scale

 SYNOPSIS
  Scale an xfig object

 USAGE
  <xfig_object>.scale (s);
  % or
  <xfig_object>.scale (sx, sy[, sz]]);

 DESCRIPTION
  If the `.scale' method is called with one argument `s',
  the object is scaled by `s' in all directions.
  If two (three) arguments `sx', `sy' (and `sz') are given,
  x, y (and z) coordinates are scaled differently.

--------------------------------------------------------------

pict.rotate_pict

 USAGE
  pict.rotate_pict (theta_degrees);

 DESCRIPTION
  A picture object can only be rotated by multiples of 90 degrees.

--------------------------------------------------------------

xfig_add_latex_package

 SYNOPSIS
  Load a package in the preamble of latex documents.

 USAGE
  xfig_add_latex_package (String_Type package[, package2, ...]);

 QUALIFIERS
  ; prepend: `package' is inserted before previous packages

 DESCRIPTION
  Options can be added to `package' in square brackets:

 EXAMPLE
  xfig_add_latex_package("fontenc[T1]", "mathpazo[osf]");

--------------------------------------------------------------

xfig_center_pict_in_box

 SYNOPSIS
  Center a pict object in a box

 USAGE
  xfig_center_pict_in_box (pict_object, X, dx, dy

 DESCRIPTION
 This function takes a pict object and centers it in a box whose width
 is `dx' and whose height is `dy'.  The vector `X' denotes the
 position of the lower-left corner of the box.  If the pict object is too
 big to fit in the box, then its lower-left corner will coincide with the
 lower-left corner of the box.

 SEE ALSO
  xfig_translate_object

--------------------------------------------------------------

xfig_clip_polyline2d

 SYNOPSIS
  Clip a list of 2d line segments

 USAGE
  list = xfig_clip_polyline2d (x[], y[], xmin, xmax, ymin, ymax)

 DESCRIPTION
 This function clips a polyline composed individual line segments that run from
 (x_i,y_i) to (x_{i+1},y_{i+1}) at the boundaries of the window defined by the
 `xmin', `xmax', `ymin', and `ymax' parameters.  The result
 is returned as an xfig polyline object.

 NOTES
 This function should be used if the order of the line segments does not matter.
 Otherwise, the `xfig_clip_polygon2d' function should be used.

 SEE ALSO
  xfig_clip_polygon2d, xfig_new_polyline_list

--------------------------------------------------------------

xfig_compound.append

 SYNOPSIS
  Append one or more xfig objects to a compound

 USAGE
  xfig_compound.append(<xfig_object> o[, ...]);

 SEE ALSO
  xfig_compound.insert

--------------------------------------------------------------

xfig_compound.insert

 SYNOPSIS
  Insert one or more xfig objects to a compound

 USAGE
  xfig_compound.insert(<xfig_object> o[, ...]);

 SEE ALSO
  xfig_compound.append

--------------------------------------------------------------

xfig_create_arrow

 SYNOPSIS
  Create a new arrow shape for a polyline object

 DESCRIPTION
  `xfig_create_arrow' creates a structure that can be used
  for polyline objects, e.g., with xfig_new_polyline.
  All information are passed via qualifiers.

 QUALIFIERS
  ; arrow_type: shape of arrow heads (values from 0 to 14), e.g.,
                XFIG_ARROWTYPE_{STICK,TRIANGLE,INDENTED,POINTED}
                and others (default: XFIG_ARROWTYPE_INDENTED==2)
  ; arrow_style: XFIG_ARROWSTYLE_{HOLLOW,FILLED}, i.e., 0 or 1;
                 indicating a filling with white or with the pen color
                 for `0 < arrow_type < 13' (default: 1)
  ; arrow_thickness: (default: 1)
  ; arrow_width: (default: 4)
  ; arrow_height: (default: 8)

 EXAMPLE
  % using the same (simple) shape for forward and backward arrow,
  % implicitly calling xfig_create_arrow (twice):
  variable
    a1 = xfig_new_polyline([0,4], [0,3]
                           ; forward_arrow, backward_arrow,
                             arrow_type=0, arrow_style=0);

  % explicitly calling xfig_create_arrow, in order to use
  % different shapes for forward and backward arrow:
  variable
    forw_arr = xfig_create_arrow(; arrow_type= 0, arrow_style=0),
    back_arr = xfig_create_arrow(; arrow_type=13, arrow_style=1),
    a2 = xfig_new_polyline([1,5], [1,4]
                           ;  forward_arrow=forw_arr,
                             backward_arrow=back_arr);

 SEE ALSO
  xfig_new_polyline

--------------------------------------------------------------

xfig_ellipse.rotate

 USAGE
  xfig_ellipse.rotate([Vector_Type axis,] Double_Type theta);

 DESCRIPTION
  If no `axis' is given, the ellipse is rotated
  in the x-y-plane around `axis = vector(0,0,1)'.

  The rotation angle `theta' is measured in radians.

--------------------------------------------------------------

xfig_get_color_names

 SYNOPSIS
  Get a list color names

 USAGE
  Array_Type xfig_get_color_names ()

 DESCRIPTION
 This function returns an array of strings giving the available color
 names.  This list includes the Xfig color names, user-defined
 colors, and the W3C color names.

 SEE ALSO
  xfig_new_color, xfig_list_colors, xfig_lookup_w3c_color

--------------------------------------------------------------

xfig_get_eye

 SYNOPSIS
  Obtain the point from which the projection of 3d space is seen

 USAGE
  Vector_Type xfig_get_eye ()

 SEE ALSO
  xfig_set_eye

--------------------------------------------------------------

xfig_get_eye_roll

 SYNOPSIS
  Obtain the roll angle under which the projection of 3d space is seen

 USAGE
  Double_Type xfig_get_eye_roll ()

 DESCRIPTION
  The roll angle is measured in degrees.

 SEE ALSO
  xfig_set_eye_roll, xfig_set_eye

--------------------------------------------------------------

xfig_get_focus

 SYNOPSIS
  Obtain the focus point of the projection of 3d space

 USAGE
  Vector_Type xfig_get_focus ()

 SEE ALSO
  xfig_set_focus

--------------------------------------------------------------

xfig_get_latex_preamble

 USAGE
  String_Typer xfig_get_latex_preamble ()

 SEE ALSO
  xfig_set_latex_preamble

--------------------------------------------------------------

xfig_justify_object

 SYNOPSIS
  Justify an object at a specified position

 USAGE
  xfig_justify_object (XFig_Object obj, Vector_Type X [, Vector_Type dX]);
  % or
  xfig_justify_object (XFig_Object obj, XFig_Object o [, Vector_Type dX]);

 DESCRIPTION
  This function moves the object to the specified position `X' (a vector)
  and justifies it at that position according to the offsets specified by
  the vector `dX'.  The components of `dX' are normally in the
  range -0.5 to 0.5 and represent offsets relative to the size of the object.
  If the components of `dX' are 0, then the object will be centered at `X'.

  Alternatively, the second argument may be an XFig object `o' itself.
  The position vector `X' is then determined from the position of `o'
  and the justification vector `dX': `obj' will be justified relative
  to the outer boundary of `o', unless the `inside' qualifier is set,
  in which case it will be justified relative to the inner boundary.

 QUALIFIERS
  ; inside: justify `obj' relative to the inner boundary of `o'

 EXAMPLE
  For `dX = vector (0,0,0)':
  the object `obj' will be justified concentrically with `o'.

  For `dX = vector (0,-0.5,0)' (i.e., `obj' will be horizontally
  centered and vertically aligned at its lower baseline): `X' is
  the horizontal center of the upper vertical baseline of `o'
  such that `obj' will be placed on top of `o'.

  For `dX = vector (0,-0.5,0)', together with the `inside' qualifier:
  `X' is the horizontal center of the lower vertical baseline of `o'
  such that `obj' will be coaligned with `o' at their lower baselines.

 SEE ALSO
  <xfig_object>.justify, <xfig_object>.get_bbox, <xfig_object>.translate

--------------------------------------------------------------

xfig_lookup_w3c_color (name)

 SYNOPSIS
  Lookup an RGB value for an W3C color name

 USAGE
  rgb = xfig_lookup_w3c_color (name)

 DESCRIPTION
 This function may be used to lookup the RGB value for a specified
 W3C color name.  If the W3C rgb.txt file could not be loaded, or
 the color name does not exist within he file, NULL will be returned.

 The primary purpose of this function is to provide a mechanism for
 overriding Xfig color values with those defined by W3C.

 EXAMPLE
 Xfig uses 0x00FF00 for green, whereas W3C defines 0x008000.  Use the
 W3C value:

  xfig_new_color ("green", xfig_lookup_w3c_color ("green"));


 SEE ALSO
  xfig_new_color, xfig_list_colors, xfig_get_color_names

--------------------------------------------------------------

xfig_make_font

 SYNOPSIS
  Create a font structure used by SLxfig's LaTeX interface

 USAGE
  Struct_Type xfig_make_font ([String_Type style, size, color])

 QUALIFIERS
  ; style: (default: "\bf\boldmath"R)
  ; size: (default: "\normalsize"R)
  ; color: (default: "black")

 DESCRIPTION
  If `color' is a string, it is considered to be
  a named color from the SLxfig color interface.
  Alternatively, `color' can be an integer number,
  representing the color's RGB value.

  `style', `size', `color' arguments different from `NULL'
  overwrite qualifier values.

 SEE ALSO
  xfig_new_text

--------------------------------------------------------------

xfig_meshgrid

 SYNOPSIS
  Produce grid points for an image

 USAGE
  (xx,yy) = xfig_meshgrid (xx, yy)

 DESCRIPTION
  This function takes two 1-d vectors representing the orthogonal
  grids for a rectangular region in the (x,y) plane and returns two
  2-d arrays corresponding to the (x,y) coordinates of each
  intersecting grid point.

  Suppose that one wants to evaluate a
  function `f(x,y)' at each point defined by the two grid
  vectors.  Simply calling `f(x,y)' using the grid vectors would
  lead to either a type-mismatch error or produce a 1-d result.  The
  correct way to do this is to use the `xfig_meshgrid' function:

    result = f(xfig_meshgrid(x,y));


--------------------------------------------------------------

xfig_multipage.add

 SYNOPSIS
  Add an xfig object to a multipage file

 USAGE
  <multipage_object>.add(ob)

 DESCRIPTION
 This function is used to render an xfig object to a multipage file.
 This is done by rendering the object to an intermediate .eps file.
 The file will removed upon closing the multipage file.

 QUALIFIERS
  ; save: Keep the intermediate file, do not remove it
  ; file=fname: Use `fname' as the basename of the
intermediate file.  The .eps extension will be used.

 SEE ALSO
  xfig_multipage_open, xfig_multipage_close

--------------------------------------------------------------

xfig_multipage.close

 SYNOPSIS
  Close a multipage file

 USAGE
  <multipage_object>.close

 DESCRIPTION
 This function is used to close a multipage file.   It will invoke
 ghostscript to write the intermediate files to the final document,
 and then remove those intermediate files that were flagged for
 removal.

 QUALIFIERS
  ; verbose=value: If greater than 0, show the ghostscript command line.
  ; crop: If given, crop the resulting multipage file to the
 largest bounding box of intermediate files.
  ; margin=value: When not cropping, add a margins to each
 page of the specified size in inches.  The default is 0.5 inches

 SEE ALSO
  xfig_multipage_open, xfig_multipage.add

--------------------------------------------------------------

xfig_multipage_open

 SYNOPSIS
  Create an xfig multipage file

 USAGE
  m = xfig_multipage_open (String_Type file [;qualifiers])

 DESCRIPTION
 This function will create a new multipage file.  Xfig objects may
 be written to the multipage file using the .add method.  Each call
 to the .add method will result in the object being rendered to an
 intermediate eps file. When finished, the .close method must be used to
 produce the final file and remove the intermediate files.

 The `file' parameter is used to specify the name of the
 multipage file.  Only multipage pdf files are supported; hence, the
 filename extension must be `.pdf'.

 QUALIFIERS
  ; save: Do not remove the intermediate files

 EXAMPLE
   m = xfig_multipage_open ("example.pdf");
   w = xfig_plot_new ();
   % Code create the first plot
   m.add (w);
   w = xfig_plot_new ();
   % Code to create the second plot
   m.add (w);
   m.close ();

 SEE ALSO
  xfig_multipage.close, xfig_multipage.add

--------------------------------------------------------------

xfig_multiplot

 SYNOPSIS
  Create a multiplot from individual panels that share the same x-axes

 USAGE
  compound = xfig_multiplot (xfig_plot p1[], p2[], ...);

 QUALIFIERS
  ; cols=intval: number of columns (default: 1)
  ; title=strval: overall title on top of the multiplot
  ; xlabel=strval: overall xlabel below the multiplot
  ; x2label=strval: overall x2label on top of the multiplot
  ; ylabel=strval: overall ylabel left of the multiplot
  ; y2label=strval: overall y2label right of the multiplot
  ; align_ylabels=intval: bitmask for aligning all y{1,2}axis-labels (default: 1|2)

 DESCRIPTION
  `p1', `p2', ... can be single plot objects or arrays of them.
  `xfig_multiplot' arranges a multi-panel plot with `cols' columns.

  The plot windows are aligned in left-right, top-down order.
  `xfig_multiplot' switches off titles, axis- and ticmark labels
  of those plots for which those would overlap with other plots. It
  is thus be desirable to have common sizes of the plot windows, as
  well as common ranges and coordinate systems on adjoining axes.
  This is particularly important if when more than one column is
  used.

  The return value is a compound object containing all plots in the
  multiplot (note that their number has to be a multiple of `cols').
  If the `title' or `x(2)label' qualifiers are specified and `cols>1',
  additional text objects are added above and below the multiplot.
  (For `cols==1', the title/x(2)label of the first/last plot are set.)
  The same holds for the `y(2)label' qualifiers, for which it depends
  on the resulting number of rows whether additional text is added
  on the left or right of the multiplot or whether the corresponding
  labels of the first or last plot are set (possibly overwritten).

--------------------------------------------------------------

xfig_new_color

 SYNOPSIS
  Add a new color definition

 USAGE
  xfig_new_color (name, RGB [,&id]

 DESCRIPTION
 This function may be used to add a new color called `name'
 with the specified RGB (24 bit integer) value.  If the optional
 third parameter is provided, it must be a reference to a variable
 whose value upon return will be set to the integer index of the color.

 NOTES
 Color names are converted to a canonical form by removing whitespace
 from the name and converting it to lowercase.  This means that
 `"OffWhite"', `"offwhite"', and `"off White"' are all
 equivalent.

 SEE ALSO
  xfig_lookup_color_rgb, xfig_lookup_color

--------------------------------------------------------------

xfig_new_compound

 SYNOPSIS
  Create an XFig compound list

 USAGE
  c = xfig_new_compound ([obj1, obj2, ...]);

 DESCRIPTION
  An empty compound list is created with `xfig_new_compound_list'.
  All arguments passed to the `xfig_new_compound' function
  are inserted in the newly created list.

 SEE ALSO
  xfig_new_vbox_compound, xfig_new_hbox_compound

--------------------------------------------------------------

xfig_new_ellipse

 SYNOPSIS
  Create a new ellipse object

 USAGE
  XFig_Ellipse_Type xfig_create_ellipse (Double_Type a [, b])

 QUALIFIERS
  ; line: line style (default: 0)
  ; width: line width (default: 1)
  ; color: line color (default: -1)
  ; fillcolor: (default: -1)
  ; areafill: darkness or pattern (default: -1 or 20, depending on `fillcolor')
  ; depth: XFig depth (default: 50)
  ; x0: x-position (default: 0)
  ; y0: y-position (default: 0)
  ; z0: z-position (default: 0)

--------------------------------------------------------------

xfig_new_eps

 SYNOPSIS
  Create an SLxfig picture object from an eps file

 USAGE
  obj = xfig_new_eps(String_Type filename);

 QUALIFIERS
  All qualifiers are passed to the `xfig_new_pict' function.

 SEE ALSO
  xfig_new_pict

--------------------------------------------------------------

xfig_new_hbox_compound

 SYNOPSIS
  Create an XFig compound list of horizontally aligned objects

 USAGE
  c = xfig_new_hbox_compound (obj1, obj2 [, ...] [, space]);

 DESCRIPTION
  The objects `obj2', ... are translated in negative y-direction
  such that all of them align horizontally according to their size.
  If the last argument `space' is numeric, it indicates additional
  horizontal space that is inserted between each of the objects.

 QUALIFIERS
  ; just=val: Justifiy the objects with respect to the first.
  If `val' is 0 then the objects will be centered.  If val is
  1, the objects will be aligned at the top.  If val is -1, they will be
  aligned at the bottom.
  ; center: Center the objects with respect to the first

 SEE ALSO
  xfig_new_vbox_compound, xfig_new_compound

--------------------------------------------------------------

xfig_new_legend

 SYNOPSIS
  Create a plot legend object

 USAGE
  legend = xfig_new_legend (labels[], colors[], linestyles[], thicknesses[], width);

 QUALIFIERS
  ; areafill=intval: (default: 20)
  ; fillcolor=strval: (default: "white")
  ; labelsize=strval: (default: "large")

 DESCRIPTION
  The `xfig_new_legend' function creates a legend object suitable for adding
  to a plot.  The legend will consist of ...

--------------------------------------------------------------

xfig_new_pict

 SYNOPSIS
  Create an object that encapsulates an image file

 USAGE
  obj = xfig_new_pict(filename, width, height [; qualifiers])

 DESCRIPTION
  This function creates an object containing the specified image file
  and scales it to the specified width an height.  The resulting
  object containing the image will be centered at (0,0,0).

 QUALIFIERS
  ; depth: XFig depth
  ; x0: x-position (default: 0)
  ; y0: y-position (default: 0)
  ; z0: z-position (default: 0)
  ; just=[jx,jy]: justification (default: [0,0])
  The `just' qualifier may be used to indicate how the object is
  to be justified with respect to the origin.  Its value must be a 2d
  numeric array [dx,dy] that gives the offset of the center of the
  image scaled with respect to the bounding box.  Examples include:

    just=[0,0]           Center object upon the origin (default)
    just=[-0.5,-0.5]     Put the lower-left corner at the origin
    just=[0.5,-0.5]      Put the lower-right corner at the origin
    just=[0.5,0.5]       Put the upper-right corner at the origin
    just=[-0.5,-0.5]     Put the upper-left corner at the origin


 SEE ALSO
  xfig_new_text, xfig_justify_object

--------------------------------------------------------------

xfig_new_png

 SYNOPSIS
  Create an object that encapsulates a png image

 USAGE
  obj = xfig_new_png(String_Type filename);

 QUALIFIERS
  ; depth: XFig depth
  ; x0: x-position (default: 0)
  ; y0: y-position (default: 0)
  ; z0: z-position (default: 0)
  ; just=[jx,jy]: justification (default: [0,0])

 DESCRIPTION
  `xfig_new_png' reads the image dimensions from the file header
  and passes them to `xfig_new_pict'. See its documentation for
  a detailed description of the qualifiers.

 SEE ALSO
  xfig_new_pict

--------------------------------------------------------------

xfig_new_polyline

 SYNOPSIS
  Create a new polyline object

 USAGE
  p = xfig_new_polyline(Vector_Type X);
  % or
  p = xfig_new_polyline(Array_Type x [, y [, z]]);

 DESCRIPTION
  If `xfig_new_polyline' is called with one `Vector_Type' argument `X',
  the fields `x', `y', and `z' are expected to contain coordinate arrays
  of the polyline's vertices.
  These can also be specified directly as `Array_Type' arguements;
  all unspecified coordinates are set to zero.

 QUALIFIERS
  ; closed: closes the polygon by repeating the first vertex at the end
  ; line: line style
  ; width: line width
  ; color: line color
  ; fillcolor: color to fill the region inside the polyline object
  ; areafill: darkness or pattern (default: 20)
  ; depth: Xfig depth
  ; join: shape of the vertex of lines: MITER, ROUNDED, BEVEL
  ; cap: shape of end points of lines: BUTT, ROUND, PROJECTING)
  ; forward_arrow: see documentation of `xfig_create_arrow'
  ; backward_arrow: see documentation of `xfig_create_arrow'

 SEE ALSO
  xfig_create_arrow

--------------------------------------------------------------

xfig_new_text

 SYNOPSIS
  Create a text object by running LaTeX

 USAGE
  obj = xfig_new_text (String_Type text [,font_object])

 QUALIFIERS
  ; extra_packages: NULL
  ; preamble: (default: NULL)
  ; color=strval: (default: "black")
  ; style=strval: (default: "\bf\boldmath"R)
  ; size=strval: (default: "\normalsize"R)
  ; rotate=angle: rotate text by `angle' in degrees (default: 0)
  ; dvi2eps_method:
  ; x0: x-position (default: 0)
  ; y0: y-position (default: 0)
  ; z0: z-position (default: 0)
  ; depth: Xfig depth
  ; just=[jx,jy]: justification, see `xfig_new_pict' (default: [0,0])

 DESCRIPTION
  This function runs LaTeX on the specified text string and returns the
  resulting object.  The text string must be formatted according to the LaTeX
  rules.  The optional parameter is a structure that may be used to specify
  the font, color, pointsize, etc to use when calling LaTeX.  This structure
  may be instantiated using the xfig_make_font.

 SEE ALSO
  xfig_make_font, xfig_add_latex_package, xfig_set_latex_preamble, xfig_new_pict

--------------------------------------------------------------

xfig_new_vbox_compound

 SYNOPSIS
  Create an XFig compound list of vertically aligned objects

 USAGE
  c = xfig_new_vbox_compound (obj1, obj2 [, ...] [, space]);

 DESCRIPTION
  The objects `obj2', ... are translated in negative y-direction
  such that all of them align vertically according to their size.
  If the last argument `space' is numeric, it indicates additional
  vertical space that is inserted between each of the objects.

 QUALIFIERS
  ; just=val: Justifiy the objects with respect to the first.
  If `val' is 0 then the objects will be centered.  If val is
  -1, the objects will be left justified.  If val is +1, they will be
  right justified.
  ; center: Center the objects with respect to the first

 SEE ALSO
  xfig_new_hbox_compound, xfig_new_compound

--------------------------------------------------------------

xfig_pict.scale

 SYNOPSIS
  Scale an xfig pict object

 USAGE
  xfig_pict.scale (s);
  % or
  xfig_pict.scale (sx, sy);

 SEE ALSO
  xfig_new_pict

--------------------------------------------------------------

xfig_plot--errorbars

 QUALIFIERS
  ; eb_line=intval: line style for error bars (default: `line' qualifier)
  ; eb_color=intval: color of error bars (default: `color' qualifier)
  ; eb_width=intval: thickness of error bars (default: `width' qualifier)
  ; eb_depth=intval: Xfig depth of error bars (default: `depth' qualifier)
  ; [x,y]eb_factor=intval: terminal size of error bars (default: 0)
  ; [x,y]min_max: Asymmetric error bars are already min/max values.

 DESCRIPTION
  Asymmetric error bars are specified as lists of negative and positive errors.
  If the `min_max' qualifier (or the appropriate `{x,y}min_max' qualifier) is set,
  then the elements of the list are considered as minimum and maximum values.

 EXAMPLE

  variable xfig_plot = xfig_plot_new();
  xfig_plot.world(0, 10, 0, 10);
  xfig_plot.plot(1, 5,          1    ; sym="x");           % y = 5 (+-1)
  xfig_plot.plot(3, 5,         {2, 3}; sym="x");           % y = 5 (+3)(-2)
  xfig_plot.plot(5, 5,         {3, 8}; sym="x",  minmax);  % y = 5 [3...8] (same as above)
  xfig_plot.plot(7, 5, {1, 2}, {3, 8}; sym="x", yminmax);  % x = 8 (+1)(-2),  but y = 5 [3...8]


 SEE ALSO
  xfig_plot.plot, xfig_plot.hplot

--------------------------------------------------------------

xfig_plot--initialize_plot

 SYNOPSIS
  Qualifiers to initialize the axes of an xfig_plot object:

 QUALIFIERS
  ; xlog: use a logarithmic x-axis
  ; ylog: use a logarithmic y-axis
  ; loglog: use logarithmic axes
  ; padx: [=0.05]: fraction of xrange to be padded on both sides
  ; pady: [=0.05]: fraction of xrange to be padded on both sides

 DESCRIPTION
  The world coordinate system of an xfig_plot object
  are initialized through the following functions,
  unless they are already set before:

 SEE ALSO
  xfig_plot.plot, xfig_plot.hplot, xfig_plot.plot_png, xfig_plot.plot_pict, xfig_plot.shade_region

--------------------------------------------------------------

xfig_plot--wcs

 SYNOPSIS
  Qualifiers to specify a plot's world coordinate system

 QUALIFIERS
  ; world0: use device coordinates for x- and y-axes
  ; world1: use first coordinate system for x- and y-axes
  ; world2: use second coordinate system for x- and y-axes
  ; world{a}{b}: use a-th WCS for x-axis and b-th WCS for y-axis, where 0 <= a, b <= 2

 DESCRIPTION
  If none of these qualifiers is specified, world1 is assumed.

  Device coordinates (0th WCS) run from 0 to 1 along the corresponding axis.

  The first or second coordinate system (1st or 2nd WCS) can be defined
  with the .world(1) or .world(2) methods. (If not set before, they are
  set automatically by some plot functions, see `xfig_plot--initialize_plot'.)

  The WCS qualifiers apply to the following functions:
  `xfig_plot.plot', `xfig_plot.hplot', `xfig_plot.shade_region',
  `xfig_plot.add_object', `xfig_plot.xylabel',
  `xfig_plot.get_world', `xfig_plot.xfig_coords'

 SEE ALSO
  xfig_plot.world, xfig_plot.world1, xfig_plot.world2, xfig_plot--initialize_plot

--------------------------------------------------------------

xfig_plot.add_object

 SYNOPSIS
  Add an object to a plot at a world coordinate position

 USAGE
  xfig_plot.add_object (obj[, x, y[, dx, dy]]);

 QUALIFIERS
 % qualifiers to specifiy the world coordinate system,
   see `xfig_plot--wcs'

 DESCRIPTION
  This function may be used to add an object to a plot window at a specified
  world coordinate.  The `dx' and `dy' arguments control the
  justification of the object.  The values of these parameters are offsets
  relative to the size of the object, and as such ordinarily have values
  in the interval `[-0.5,0.5]'.  For example, `0,0' will center
  the object on `(x,y)', and `(-0.5,-0.5)' will move the lower left
  corner of the object to the specified coordinate.

 SEE ALSO
  xfig_plot--wcs

--------------------------------------------------------------

xfig_plot.axis

 USAGE
  xfig_plot.axis([; qualifiers]);

 QUALIFIERS
  ; on: draw axis, major and minor tic marks, as well as tic labels (default: on)
  ; off: do not draw axis, major nor minor tic marks, nor tic labels
  ; linear: set linear axis scale
  ; log: set logarithmic axis scale
  ; major: draw major tic marks [precedence over on/off] or array of major tic mark values
  ; minor: draw minor tic marks [precedence over on/off] or array of minor tic mark values
  ; color: color of axis, major and minor tic marks
  ; major_color: color of major tic marks [precedence over color]
  ; minor_color: color of minor tic marks [precedence over color]
  ; width: width of axis, major and minor tic marks
  ; major_width: width of major tic marks [precedence over width]
  ; minor_width: width of minor tic marks [precedence over width]
  ; line: line style of axis, major and minor tic marks
  ; major_line: line style of major tic marks [precedence over line]
  ; minor_line: line style of minor tic marks [precedence over line]
  ; major_len: length of the major tic marks
  ; minor_len: length of the minor tic marks
  ; grid: extend major and minor tic marks to a grid
  ; major_grid: extend major tic marks to a grid [precedence over grid]
  ; minor_grid: extend minor tic marks to a grid [precedence over grid]
  ; depth: Xfig depth of the axis
  ; tic_depth: Xfig depth of the ticmarks
  ; maxtics:  maximum number of major tic marks
  ; ticlabels: draw tic labels (requires major tic marks)
  ; ticlabels_confine: prevent tic labels from overhanging the plot box
  ; ticlabel_style: tic label font style, see `xfig_make_font'
  ; ticlabel_color: tic label font color, see `xfig_make_font'
  ; ticlabel_size: tic label font size, see `xfig_make_font'
  ; format: tic label format string in `sprintf' style
  ; wcs: name of a custom world coordinate system transformation

 DESCRIPTION
  All axes can be configured with the qualifiers mentioned above.

 SEE ALSO
  xfig_plot.xaxis, xfig_plot.x1axis, xfig_plot.x2axis, xfig_plot.yaxis, xfig_plot.y1axis, xfig_plot.y2axis

--------------------------------------------------------------

xfig_plot.get_world

 SYNOPSIS
  Get the world coordinates of a plot

 USAGE
  [xmin,xmax,ymin,ymax] = xfig_plot.get_world ();

 QUALIFIERS
 % qualifiers to specifiy the world coordinate system

 SEE ALSO
  xfig_plot--wcs

--------------------------------------------------------------

xfig_plot.hplot

 USAGE
  xfig_plot.hplot ([x,] y);
  % or
  xfig_plot.hplot (x, y[, dy]);

 QUALIFIERS
 % qualifiers to initialize the first plot only,
   see `xfig_plot--initialize_plot'

 % qualifiers to specifiy the world coordinate system,
   see `xfig_plot--wcs'

 % qualifiers for lines (defaults for error bars):
  ; width: line thickness
  ; color: line color
  ; line: line style
  ; fillcolor=fcol: fill histogram with color `fcol' (default: `color')
  ; fill[=area_fill]: use style `area_fill' for shaded histogram (default: 20, if set)
  ; depth: Xfig depth

 % qualifiers for error bars:
   see `xfig_plot--errorbars'

 % qualifiers for histogram:
  ; y_first: y-value of first bin's vertical line
  ; y_last: y-value of last bin's vertical line

 DESCRIPTION
  `x' is an array of lower bin boundaries corresponding
  to the histogram values `y'. If `length(x)==length(y)+1',
  then `x[-1]' is the upper boundary of the last bin,
  otherwise, the last bin will be as large as the previous one.
  If no `x' values are given, `x = [1:length(y)]' is assumed.

 SEE ALSO
  xfig_plot--initialize_plot, xfig_plot--wcs, xfig_plot--errorbars

--------------------------------------------------------------

xfig_plot.plot

 USAGE
  xfig_plot.plot ([x,] y);
  % or
  xfig_plot.plot (x, y, [dx,] dy);

 QUALIFIERS
 % qualifiers to initialize the first plot only,
   see `xfig_plot--initialize_plot'

 % qualifiers to specifiy the world coordinate system,
   see `xfig_plot--wcs'

 % qualifiers for lines (defaults for error bars and symbols):
  ; color=strval: color of lines symbols and error bars
  ; width=intval: thickness of lines and error bars
  ; depth=intval: Xfig depth
  ; line=intval: line style for lines and error bars
  ; forward_arrow: see `xfig_create_arrow' (default: NULL)
  ; backward_arrow: see `xfig_create_arrow' (default: NULL)

 % qualifiers for error bars:
   see `xfig_plot--errorbars'

 % qualifiers for symbols:
  ; sym=strval: symbol, see xfig_plot_get_symbol_names
  ; symcolor=strval: color of symbols (default: `color' qualifier)
  ; size=val: symbol point size
  ; fill[=intval]: area fill style (default: 20, if set; otherwise -1)
  ; fillcolor=strval: color for filled symbols
  ; symlinestyle=intval: line style to draw symbols
  ; symwidth=intval: thickness of symbol lines (default: `width' qualifier)
  ; symdepth=intval: Xfig depth of symbols (default: `depth' qualifier)

 DESCRIPTION
  If no `x' values are given, `x = [1:length(y)]' is assumed.
  If a symbol is specified, no lines are drawn
  unless the line qualifier is also specified.

 SEE ALSO
  xfig_plot--initialize_plot, xfig_plot--wcs, xfig_plot--errorbars

--------------------------------------------------------------

xfig_plot.plot_pict

 USAGE
  xfig_plot.plot_pict (String_Type imgfile);

 QUALIFIERS
  ; depth: Xfig depth

 % qualifiers to initialize the first plot only,
   see `xfig_plot--initialize_plot'

 SEE ALSO
  xfig_plot.plot_png

--------------------------------------------------------------

xfig_plot.plot_png

 SYNOPSIS
  Add a png file to a plot, scaling it to the window

 USAGE
  xfig_plot.plot_png (String_Type pngfile);
  % or
  xfig_plot.plot_png (Array_Type image);

 QUALIFIERS
  ; depth: Xfig depth

 % qualifiers to initialize the first plot only,
   see `xfig_plot--initialize_plot'
  ; cmap: name of the color map used by `png_gray_to_rgb'

 DESCRIPTION
  The image from `pngfile' is drawn in the plot region.

  If a two-dimensional array `image' is passed to `.plot_png',
  it is converted to a png file in the temporary directory,
  using the `png_gray_to_rgb' function and possibly a color map.
  All other qualifiers are forwarded to `png_gray_to_rgb'.

 SEE ALSO
  xfig_plot_new_png, xfig_plot.plot_pict, xfig_set_tmp_dir, png_gray_to_rgb

--------------------------------------------------------------

xfig_plot.shade_region

 SYNOPSIS
  Add a filled rectangle or polygon to the plot

 USAGE
  xfig_plot.shade_region (x[], y[]);
  % or
  xfig_plot.shade_region (xmin, xmax, ymin, ymax);

 QUALIFIERS
 % qualifiers to initialize the first plot only
   see `xfig_plot--initialize_plot'

 % qualifiers to specifiy the world coordinate system
   see `xfig_plot--wcs'

  ; line: line style
  ; width: line thickness
  ; color: line color
  ; fillcolor: fill color (default: `color')
  ; fill: area fill style (default: 20)
  ; depth: Xfig depth of shaded region

 SEE ALSO
  xfig_plot--initialize_plot, xfig_plot--wcs

--------------------------------------------------------------

xfig_plot.title

 SYNOPSIS
  Add a title to a plot

 USAGE
  xfig_plot.title (String_Type title);
  % or
  xfig_plot.title (XFig_Object title);

 DESCRIPTION
  The title is created from the string with the
  `xfig_new_text' function using all applied qualifiers.
  If `title' is no string, it is assumed to be
  an already properly formatted xfig object.
  The title is centered above the plot area.
  Any previously existing title object is removed.

--------------------------------------------------------------

xfig_plot.world

 SYNOPSIS
  define a plot's world coordinate system

 USAGE
  xfig_plot.world (Double_Type xdata[], ydata[]);
  % or
  xfig_plot.world (Double_Type x0, x1, y0, y1);

 QUALIFIERS
  ; xlog: use a logarithmic x-axis
  ; ylog: use a logarithmic y-axis
  ; loglog: use logarithmic axes
  ; padx: fraction of xrange to be padded on both sides (default: 0.05 or 0)
  ; pady: fraction of yrange to be padded on both sides (default: 0.05 or 0)

 SEE ALSO
  xfig_plot.world1, xfig_plot.world2

--------------------------------------------------------------

xfig_plot.world1

 SYNOPSIS
  define a plot's first world coordinate system

 SEE ALSO
  xfig_plot.world

--------------------------------------------------------------

xfig_plot.world2

 SYNOPSIS
  define a plot's second world coordinate system

 QUALIFIERS
  ; xticlabels: flag whether (1) or not (0) to draw ticlabels on x2axis (default: 1)
  ; yticlabels: flag whether (1) or not (0) to draw ticlabels on y2axis (default: 1)

 SEE ALSO
  xfig_plot.world

--------------------------------------------------------------

xfig_plot.x1axis

 USAGE
  xfig_plot.x1axis([; qualifiers]);

 DESCRIPTION
  This method allows for the configuration of the first x-axis
  via qualifiers -- see `xfig_plot.axis' for further information.

 SEE ALSO
  xfig_plot.axis

--------------------------------------------------------------

xfig_plot.x2axis

 USAGE
  xfig_plot.x2axis([; qualifiers]);

 DESCRIPTION
  This method allows for the configuration of the second x-axis
  via qualifiers -- see `xfig_plot.axis' for further information.

 SEE ALSO
  xfig_plot.axis

--------------------------------------------------------------

xfig_plot.x2label

 SYNOPSIS
  Add a label for the second x-axis to a plot

 USAGE
  xfig_plot.x2label (String_Type x2label);

 DESCRIPTION
  The x2label is created from the string with the
  `xfig_new_text' function using all applied qualifiers.

 SEE ALSO
  xfig_new_text

--------------------------------------------------------------

xfig_plot.xaxis

 USAGE
  xfig_plot.xaxis([; qualifiers]);

 QUALIFIERS
  ; ticlabels1: overwrites the `ticlabels' qualifier for the x1axis
  ; ticlabels2: overwrites the `ticlabels' qualifier for the x2axis

 DESCRIPTION
  This method allows for the configuration of both x-axes
  via qualifiers -- see `xfig_plot.axis' for further information.

 SEE ALSO
  xfig_plot.axis

--------------------------------------------------------------

xfig_plot.xfig_coords

 USAGE
  (Double_Type xXfig, yXfig) = xfig_plot.xfig_coords (Double_Type x, y);
  % or
  Double_Type xXfig = xfig_plot.xfig_coords (Double_Type x, );
  % or
  Double_Type yXfig = xfig_plot.xfig_coords (, Double_Type y);

 QUALIFIERS
 % qualifiers to specify the world coordinate system,

 SEE ALSO
  xfig_plot--wcs

--------------------------------------------------------------

xfig_plot.xlabel

 SYNOPSIS
  Add an x-axis label to a plot

 USAGE
  xfig_plot.xlabel (String_Type xlabel);

 DESCRIPTION
  The x-label is created from the string with the
  `xfig_new_text' function using all applied qualifiers.

 SEE ALSO
  xfig_new_text

--------------------------------------------------------------

xfig_plot.xylabel

 USAGE
  xfig_plot.xylabel (Double_Type x, y, String_Type text[, dx, dy]);

 QUALIFIERS
 % qualifiers to specifiy the world coordinate system,
   see `xfig_plot--wcs'

 SEE ALSO
  xfig_plot_text, xfig_plot--wcs

--------------------------------------------------------------

xfig_plot.y1axis

 USAGE
  xfig_plot.y1axis([; qualifiers]);

 DESCRIPTION
  This method allows for the configuration of the first y-axis
  via qualifiers -- see `xfig_plot.axis' for further information.

 SEE ALSO
  xfig_plot.axis

--------------------------------------------------------------

xfig_plot.y2axis

 USAGE
  xfig_plot.y2axis([; qualifiers]);

 DESCRIPTION
  This method allows for the configuration of the second y-axis
  via qualifiers -- see `xfig_plot.axis' for further information.

 SEE ALSO
  xfig_plot.axis

--------------------------------------------------------------

xfig_plot.y2label

 SYNOPSIS
  Add a label for the second y-axis to a plot

 USAGE
  xfig_plot.y2label (String_Type y2label);

 DESCRIPTION
  The y2label is created from the string with the
  `xfig_new_text' function using all applied qualifiers.

 SEE ALSO
  xfig_new_text

--------------------------------------------------------------

xfig_plot.yaxis

 USAGE
  xfig_plot.yaxis([; qualifiers]);

 QUALIFIERS
  ; ticlabels1: overwrites the `ticlabels' qualifier for the y1axis
  ; ticlabels2: overwrites the `ticlabels' qualifier for the y2axis

 DESCRIPTION
  This method allows for the configuration of both y-axes
  via qualifiers -- see `xfig_plot.axis' for further information.

 SEE ALSO
  xfig_plot.axis

--------------------------------------------------------------

xfig_plot.ylabel

 SYNOPSIS
  Add a y-axis label to a plot

 USAGE
  xfig_plot.ylabel (String_Type ylabel);

 DESCRIPTION
  The ylabel is created from the string with the
  `xfig_new_text' function using all applied qualifiers.

 SEE ALSO
  xfig_new_text

--------------------------------------------------------------

xfig_plot_add_symbol

 SYNOPSIS
  Add a plot symbol

 USAGE
  xfig_plot_add_symbol (String_Type name, Ref_Type funct)

 DESCRIPTION
  This function may be used to add a new plot symbol of the specified name.
  The `funct' parameter specifies a function to be called to create the
  symbol.  It will be called with a single parameter: a value representing the
  scale size of the symbol in fig units.  The function must return two arrays
  representing the X and Y coordinates of the polygons that represent
  the symbol.  The center of the object is taken to be (0,0).  If more than one
  polygon is required to represent the object, an array of arrays may be
  returned.

--------------------------------------------------------------

xfig_plot_add_transform

 USAGE
  xfig_plot_add_transform (String_Type name, Ref_Type &wcs_func, &wcs_invfunc, Any_Type client_data);

 QUALIFIERS
  ; xmin: (default: -inf)
  ; xmax: (default: +inf)
  ; ticfun: (default: &generic_compute_tics)

 DESCRIPTION
  `wcs_func' (`wcs_invfunc') is a function
  of two arguments: the world (plot) coordinate and some client data.
  It has to return the correspondig plot (world) coordinate.

  The qualifier `ticfun' may reference a function
  that takes 4 arguments: xmin, xmax, maxtics, and client_data.
  It is supposed to return two arrays of major and minor tic marks.

--------------------------------------------------------------

xfig_plot_get_symbol_names

 USAGE
  String_Type[] xfig_plot_get_symbol_names ()

 SEE ALSO
  xfig_plot.plot

--------------------------------------------------------------

xfig_plot_new

 SYNOPSIS
  Create a new plot object

 USAGE
  w = xfig_plot_new ( [Int_Type width, Int_Type height] );

 DESCRIPTION
  This function creates a new plot object of the specified width and height.
  If the width and height parameters are not given, defaults will be used.
  The width and height values specify the size of the plotting area and do not
  include the space for tic marks and labels.

  The following qualifiers configure all axes' tic labels at once:

 QUALIFIERS
  ; ticlabel_style: tic label font style, see `xfig_make_font'
  ; ticlabel_color: tic label font color, see `xfig_make_font'
  ; ticlabel_size: tic label font size, see `xfig_make_font'

 EXAMPLE

   w = xfig_plot_new ();


 SEE ALSO
  xfig_plot_define_world, xfig_render_object

--------------------------------------------------------------

xfig_plot_new_png

 SYNOPSIS
  Create a new plot window for a png file

 USAGE
  w = xfig_plot_new_png (file)

 QUALIFIERS
  ; depth: Xfig depth

 SEE ALSO
  xfig_plot_new, xfig_plot.plot_png, xfig_plot.plot_pict

--------------------------------------------------------------

xfig_plot_text

 SYNOPSIS
  Add text to the plot

 USAGE
  xfig_plot_text (w, text, x, y [,dx, dy])

        w: plot object
     x, y: world coordinates
   dx, dy: justification


 DESCRIPTION
  This function creates a text object at the specified location on the plot.
  By default, the text will be centered on the specified world coordinates.
  The justification parameters `dx' and `dy' may be used to specify
  the justifcation of the text.  See the documentation for `xfig_plot_add_object'
  for more information.

 EXAMPLE

   xfig_plot_text (w, "$cos(\omega t)$"R, 3.2, 6.0, -0.5, 0);

 will left justify the text at the position (3.2,6.0).

 SEE ALSO
  xfig_plot_add_object, xfig_new_text

--------------------------------------------------------------

xfig_render_object

 SYNOPSIS
  Render an object to a device

 USAGE
  xfig_render_object (obj, device)

 DESCRIPTION
  This function renders the specified object to a specified device.
  If the device parameter is a string, then a device will be opened with
  the specified name.

 SEE ALSO
  xfig_create_file, xfig_close_file

--------------------------------------------------------------

xfig_set_eye

 SYNOPSIS
  Define the point from which the projection of 3d space is seen

 USAGE
  xfig_set_eye (Double_Type dist, theta, phi [, roll]);

 DESCRIPTION
  `dist'  - distance of the eye from the focus
  `theta' - polar angle from the z-axis (in degrees)
  `phi'   - azimuthal angle in the x-y-plane (in degrees)
  `roll'  - roll angle (in degrees)

 SEE ALSO
  xfig_get_eye, xfig_get_eye_roll, xfig_set_eye_roll, xfig_set_focus

--------------------------------------------------------------

xfig_set_eye_roll

 SYNOPSIS
  Set the roll angle under which the projection of 3d space is seen

 USAGE
  xfig_get_eye_roll (Double_Type roll);

 DESCRIPTION
  The `roll' angle is measured in degrees.

 SEE ALSO
  xfig_get_eye_roll, xfig_set_eye, xfig_set_focus

--------------------------------------------------------------

xfig_set_focus

 SYNOPSIS
  Define the focus point of the projection of 3d space

 USAGE
  xfig_set_focus (Vector_Type X);

 SEE ALSO
  xfig_get_focus, xfig_set_eye

--------------------------------------------------------------

xfig_set_font_style

 SYNOPSIS
  Set the default font style for LaTeX

 USAGE
  xfig_set_font_style (String_Type style);

 DESCRIPTION
  Unless changed, the default font style is "\bf\boldmath"R.

 SEE ALSO
  xfig_make_font, xfig_new_text, xfig_add_latex_package

--------------------------------------------------------------

xfig_set_latex_preamble

 USAGE
  xfig_set_latex_preamble (String_Type preamble)

 SEE ALSO
  xfig_get_latex_preamble

--------------------------------------------------------------

xfig_set_output_driver

 SYNOPSIS
  Associate an output driver to a file extension

 USAGE
  xfig_set_output_driver (String_Type ext, String_Type cmd)

 DESCRIPTION
 This may may be used to define the command that runs to created the specified
 output format (dictated by the extension) from the corresponding .fig file.
 The `ext' parameter specifies the filename extension and `cmd' is
 the shell command that will be used to generate the file.

 The `cmd' may contain the following format descriptors that will be
 replaced by the corresponding objects before being passed to the shell:

   %I    Input .fig file
   %O    Output file
   %P    paper-size
   %B    basename of the file


 EXAMPLE
 The default driver for postscript output is given by:

  xfig_set_output_driver ("ps", "fig2dev -L ps -c -z %P %I %O");

 The `ps2ps' command may result in a smaller file size at a slight cost
 of resolution.  It may be used as follows:

    xfig_set_output_driver ("ps", "fig2dev -L ps -c -z %P %I %B-tmp.ps"
                             + ";ps2ps %B-tmp.ps %O; rm -f %B-tmp.ps");


 SEE ALSO
  xfig_set_paper_size

--------------------------------------------------------------

xfig_set_verbose

 SYNOPSIS
  Control the level of chattiness

 USAGE
  xfig_set_verbose(Integer_Type level);

 DESCRIPTION
  This function may be used to control the verbosity level of the
  xfig functions that display informational messages.

 NOTES
  It is not always possible to control the verbosity level of
  external programs.  For the LaTeX/eps interface, if the level is 0,
  then only the running command will be displayed and any output will
  be redirected to `/dev/null'.  Otherwise if level > 0, then
  the output will not be redirected.

--------------------------------------------------------------

xfig_timetics

 USAGE
  xfig_timetics(tmin, tmax [;qualifiers])

 DESCRIPTION
 This function may be used to construct nice tic-labels for the time
 interval specified by the tmin and tmax variables.  By default,
 these values represent the number of seconds since the POSIX epoch
 1970-01-01T00:00:00Z.  The format of the tic-labels may be controlled
 by qualifiers.

 This function returns a structure with the following fields:

   tmin       The value of the tmin parameter
   tmax       The value of the tmax parameter
   major      An array of major tic positions
   minor      An array of minor tic positions
   ticlabels  An array of ticlabels correponding to the major tic positions

 The field names of this structure were chosen to correspond to the
 qualifiers accepted by the plot axis methods.

 QUALIFIERS
   ; localtime: Construct tic labels using localtime
   ; timetotm=&func: Use func to convert a time value to a tm structure
   ; tmtotime=&func: Use func to convert a tm structure to a time value

 The default is to format the time as UTC using the `gmtime' and
 `timegm' functions.  If the `localtime' qualifier is
 given, the `localtime' and `mktime' functions will be used.
 The `timetotm' and `tmtotime' qualifiers may be used to
 specify the functions to be used convert to and from tm structures.
 The default (no qualifiers) corresponds to using
 `timetotm=&gmtime' and `tmtotime=timegm'.

 EXAMPLE

   tmax = _time();             % Current time
   tmin = tmax - 100*86400;    % 100 days prior
   tinfo = xfig_timetics (tmin, tmax; localtime, maxtics=6);
   t = [tmin:tmax:#1024];
   y = sin(2*PI/(5*86400)*(t-tmin));   % 5 day period
   w = xfig_plot_new();
   w.plot (t, y; color="blue");
   w.x1axis (;;tinfo);
   w.render ("/tmp/example.pdf");

 Note that the structure returned by the `xfig_timetics' was
 passed as a structure of qualifiers to the `x1axis' method.

--------------------------------------------------------------
